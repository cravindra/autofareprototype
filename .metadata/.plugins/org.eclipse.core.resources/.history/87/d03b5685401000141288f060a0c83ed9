package com.autofare.autofareprototype;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import org.json.JSONObject;

import android.app.Activity;
import android.graphics.Color;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;

public class MapHandler {
	
	 GoogleMap map;
	 ArrayList<LatLng> markerPoints;
	 TextView tvEstFare,tvDistance;
	 EditText etSrcAdd,etDestAdd;
	 SupportMapFragment fm;
	 float autoFare, minAutoFare, minDist;
	 
	 Activity a;
	
	

	public MapHandler( final GoogleMap map,TextView tvEstFare, EditText etSrcAdd,
			EditText etDestAdd, SupportMapFragment fm,Activity a,TextView tvDistance) {
		super();
		
		//Set AutoFare Parameters
		autoFare=10;
		minAutoFare=20;
		minDist=2;
		//End Auto Fare aparms
		
		this.map = map;
		this.tvEstFare = tvEstFare;
		this.tvDistance = tvDistance;
		this.etSrcAdd = etSrcAdd;
		this.etDestAdd = etDestAdd;
		this.fm = fm;
		this.a=a;
		markerPoints = new ArrayList<LatLng>();
		
		
		this.map.setMyLocationEnabled(true);
		
		this.map.setOnMapClickListener(new OnMapClickListener()
		{
			public void onMapClick(LatLng point)
            {
				addPoint(point);
				 // Checks, whether start and end locations are captured
		        if (markerPoints.size() >= 2)
		        {
		            LatLng origin = markerPoints.get(0);
		            LatLng dest = markerPoints.get(1);

		            // Getting URL to the Google Directions API
		            String url = getDirectionsUrl(origin, dest);
		            startDownload(url);

		            
		        }
                
            }
			
			
			
		});
	}
	
	void addPoint(LatLng point)
	{
		// Already two locations
        if (markerPoints.size() > 1)
        {
            markerPoints.clear();
            map.clear();
        }

        // Adding new item to the ArrayList
        markerPoints.add(point);

        // Creating MarkerOptions
        MarkerOptions options = new MarkerOptions();

        // Setting the position of the marker
        options.position(point);

        /**
         * For the start location, the color of marker is GREEN and
         * for the end location, the color of marker is RED.
         */
        if (markerPoints.size() == 1)
        {
            options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));
        } else if (markerPoints.size() == 2)
        {
            options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED));
        }

        // Add new marker to the Google Map Android API V2
        map.addMarker(options);

       
	}

	void addPoint(MarkerOptions options)
	{
		// Already two locations
        if (markerPoints.size() > 1)
        {
            markerPoints.clear();
            map.clear();
        }

        // Adding new item to the ArrayList
        markerPoints.add(options.getPosition());
        // Add new marker to the Google Map Android API V2
        map.addMarker(options);

       
	}
	
	void setMarkers(CustomParser parser)
	{
		
		markerPoints.clear();
        map.clear();
        MarkerOptions srcOpt=new MarkerOptions();
        MarkerOptions destOpt=new MarkerOptions();
        LatLng src=parser.getSource().get(0).get(0);
        LatLng dest=parser.getDestination().get(0).get(0);
        
        srcOpt.title("Start");
        srcOpt.snippet(parser.getStartAddress().get(0).get(0));
        srcOpt.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));
        srcOpt.position(src);
        
        destOpt.title("End");
        destOpt.snippet(parser.getEndAddress().get(0).get(0));
        destOpt.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED));
        destOpt.position(dest);
        
        addPoint(srcOpt);
        addPoint(destOpt);
	}
       
            
       
	
	
	public void clickEventHandler()
	{
		String origin=etSrcAdd.getText().toString();
		String dest=etDestAdd.getText().toString();
		
		if(origin!=null && dest != null)
		{
			String url=getDirectionsUrl(origin,dest);
			startDownload(url);
		}
	}
	
	
	
	
	public void startDownload(String url)
	{
		DownloadTask downloadTask = new DownloadTask();
		 
        // Start downloading json data from Google Directions API
        downloadTask.execute(url);
	}
	
	 public String getDirectionsUrl(LatLng origin, LatLng dest)
	 {
	        // Origin of route
	        String str_origin = "origin=" + origin.latitude + "," + origin.longitude;
	 
	        // Destination of route
	        String str_dest = "destination=" + dest.latitude + "," + dest.longitude;
	 
	        // Sensor enabled
	        String sensor = "sensor=false";
	 
	        // Building the parameters to the web service
	        String parameters = str_origin + "&" + str_dest + "&" + sensor;
	 
	        // Output format
	        String output = "json";
	 
	        // Building the url to the web service
	        String url = "https://maps.googleapis.com/maps/api/directions/" + output + "?" + parameters;
	 
	        return url;
	 }
	
	 private String addressDecoder(String addr)
	 {
		 addr.toLowerCase(Locale.getDefault()).replace(' ', '+');
		 return addr;
	 }
	 
	 private String getDirectionsUrl(String origin, String dest)
	    {
		 try{
	        	origin=URLEncoder.encode(origin, "utf-8");
	        	dest=URLEncoder.encode(dest, "utf-8");
	        	tvEstFare.setText(dest);
	        }
	        catch(UnsupportedEncodingException e)
	        {
	        	e.printStackTrace();
	        	
	        }
	        // Origin of route
	        String str_origin = "origin=" + addressDecoder(origin);
	 
	        // Destination of route
	        String str_dest = "destination=" + addressDecoder(dest);
	 
	        // Sensor enabled
	        String sensor = "sensor=false";
	 
	        // Building the parameters to the web service
	        String parameters = str_origin + "&" + str_dest + "&" + sensor;
	 
	        // Output format
	        String output = "json";
	 
	        // Building the url to the web service
	        String url = "https://maps.googleapis.com/maps/api/directions/" + output + "?" + parameters;
	        
	       
	        return url;
	    }


	 /** A method to download json data from url */
	 private String downloadUrl(String strUrl) throws IOException
	    {
	        String data = "";
	        InputStream iStream = null;
	        HttpURLConnection urlConnection = null;
	        try
	        {
	            URL url = new URL(strUrl);
	 
	            // Creating an http connection to communicate with url
	            urlConnection = (HttpURLConnection) url.openConnection();
	 
	            // Connecting to url
	            urlConnection.connect();
	 
	            // Reading data from url
	            iStream = urlConnection.getInputStream();
	 
	            BufferedReader br = new BufferedReader(new InputStreamReader(iStream));
	 
	            StringBuffer sb = new StringBuffer();
	 
	            String line = "";
	            while ((line = br.readLine()) != null)
	            {
	                sb.append(line);
	            }
	 
	            data = sb.toString();
	 
	            br.close();
	 
	        } catch (Exception e)
	        {
	            Log.d("Exception while downloading url", e.toString());
	        } finally
	        {
	            iStream.close();
	            urlConnection.disconnect();
	        }
	        return data;
	    }	 

	// Fetches data from url passed
	    private class DownloadTask extends AsyncTask<String, Void, String>
	    {
	        // Downloading data in non-ui thread
	        @Override
	        protected String doInBackground(String... url)
	        {
	 
	            // For storing data from web service
	            String data = "";
	 
	            try
	            {
	                // Fetching the data from web service
	                data = downloadUrl(url[0]);
	            } catch (Exception e)
	            {
	                Log.d("Background Task", e.toString());
	            }
	            return data;
	        }
	 
	        // Executes in UI thread, after the execution of
	        // doInBackground()
	        @Override
	        protected void onPostExecute(String result)
	        {
	            super.onPostExecute(result);
	 
	            ParserTask parserTask = new ParserTask();
	 
	            // Invokes the thread for parsing the JSON data
	            parserTask.execute(result);
	 
	        }
	    }


	    /** A class to parse the Google Places in JSON format */
	    private class ParserTask extends AsyncTask<String, Integer, List<List<HashMap<String, String>>>>
	    {
	    	CustomParser mParser;
	 
	        // Parsing the data in non-ui thread
	        @Override
	        protected List<List<HashMap<String, String>>> doInBackground(String... jsonData)
	        {
	            JSONObject jObject;
	            List<List<HashMap<String, String>>> routes = null;
	 
	            try
	            {
	                jObject = new JSONObject(jsonData[0]);
	                /*DirectionsJSONParser parser = new DirectionsJSONParser();*/
	                mParser=new CustomParser(jObject);
	 
	                // Starts parsing data
	                routes = mParser.getRoutes();
	            } catch (Exception e)
	            {
	                e.printStackTrace();
	            }
	            return routes;
	        }
	 
	        // Executes in UI thread, after the parsing process
	        @Override
	        protected void onPostExecute(List<List<HashMap<String, String>>> result)
	        {
	            ArrayList<LatLng> points = null;
	            PolylineOptions lineOptions = null;
	            String distance = "";
	            String distanceval = "";
	            //LatLng start =null,stop=null;
	            if (result==null||result.size() < 1)
	            {
	                Toast.makeText(a.getBaseContext(), "No Points", Toast.LENGTH_SHORT).show();
	                return;
	            }
	 
	            // Traversing through all the routes
	            for (int i = 0; i < result.size(); i++)
	            {
	                points = new ArrayList<LatLng>();
	                lineOptions = new PolylineOptions();
	 
	                // Fetching i-th route
	                List<HashMap<String, String>> path = result.get(i);
	 
	                // Fetching all the points in i-th route
	                for (int j = 0; j < path.size(); j++)
	                {
	                    HashMap<String, String> point = path.get(j);
	 
	                    if (j == 0)
	                    { // Get distance from the list
	                        distance = point.get("distance");
	                        continue;
	                    } else if (j == 1)
	                    { // Get distanceval from the list
	                        distanceval = point.get("distanceval");
	                        continue;
	                    }
	                    /*if(j==2)
	                    {
	                    	double lat = Double.parseDouble(point.get("lat"));
		                    double lng = Double.parseDouble(point.get("lng"));
		                    //start = new LatLng(lat, lng);
	                    }
	                    if(j==path.size()-1)
	                    {
	                    	double lat = Double.parseDouble(point.get("lat"));
		                    double lng = Double.parseDouble(point.get("lng"));
		                    //stop = new LatLng(lat, lng);
	                    }*/
	                    double lat = Double.parseDouble(point.get("lat"));
	                    double lng = Double.parseDouble(point.get("lng"));
	                    LatLng position = new LatLng(lat, lng);
	                    points.add(position);
	                }
	 
	                // Adding all the points in the route to LineOptions
	                lineOptions.addAll(points);
	                lineOptions.width(2);
	                lineOptions.color(Color.RED);
	            }
	 
	            tvDistance.setText(distance);
	            
	            float fare=0;
	            float dist=Integer.parseInt(distanceval)/1000;
	            if(dist<minDist)
	            {
	            	fare=minAutoFare;
	            }
	            else
	            {
	            	fare=dist*autoFare;
	            }
	            tvEstFare.setText(Float.toString(fare));
	            
	            
	            
	            setMarkers(mParser);
	       
	 
	            // Drawing polyline in the Google Map for the i-th route
	           map.addPolyline(lineOptions);
	           //Zooming to view
	           map.moveCamera(CameraUpdateFactory.newLatLngBounds(new LatLngBounds(mParser.getSwBound().get(0),mParser.getNeBound().get(0)), 20));
	        }
	    }

}
